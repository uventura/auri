program         → declaration* EOF;

declaration     → default_declaration
                | run_statement ;

default_declaration → fun_decl
                    | var_decl
                    | struct_decl
                    | statement

statement   → expr_stmt
            | for_stmt
            | while_stmt
            | if_stmt
            | block_stmt
            | return_stmt;

//====================================================
run_statement → run_stmt

block_stmt       → "{" default_declaration* "}"
expr_stmt        → expression ";"
while_stmt       → "while" "(" expression ")" block_stmt
if_stmt          → "if" "(" expression ")" block_stmt
import_stmt      → import "(" STRING ("," STRING)*  ")" ";"
var_stmt         → ("var" | "bool" | "numeric" | "string") IDENTIFIER ("=")? ";"
return_stmt     → "return" expression? ";" ;

run_stmt         → (run | pre_run | post_run | setup) IDENTIFIER block_stmt;

//====================================================
expression      → primary
                | unary
                | binary
                | grouping ;
grouping        → "(" expression ")" ;
unary           → ( "-" | "!" ) expression ;
binary          → expression operator expression ;
operator        → "==" | "!=" | "<" | "<=" | ">" | ">="
                | "+"  | "-"  | "*" | "/" ;
primary         → NUMBER | STRING | "true" | "false" | "null" ;

expression → assignment
assignment → IDENTIFIER "=" assignment
or         → and (|| equality )*
and        → equality (&& equality)*
equality   → comparison (("==" | "!=") comparison)*
comparison → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term       → factor ( ( "-" | "+" ) factor )* ;
factor     → unary ( ( "/" | "*" ) unary )* ;
unary      → ( "!" | "-" ) unary | call ;
call       → primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary    → NUMBER | STRING | "true" | "false" | "null" | "(" expression ")" ;
